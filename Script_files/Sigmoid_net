import numpy as np
import pickle
import gzip
import random
import time



class QuadraticCost(object):

    @staticmethod
    def fn(a, y):
        return 0.5*np.linalg.norm(a-y)**2

    @staticmethod
    def delta(z, a, y):
        return (a-y) * sigmoid_prime(z)

class CrossEntropyCost(object):

    @staticmethod
    def fn(a, y):
        return np.sum(np.nan_to_num(-y*np.log(a)-(1-y)*np.log(1-a)))
    
    @staticmethod
    def delta(z, a, y):
        return (a-y)
    
class default_weights(object):
    def weights(sizes):
        """Initialize weights and biases to zero."""
        biases = [np.random.randn(y, 1) for y in sizes[1:]]
        weights = [np.random.randn(y, x)/np.sqrt(x) for x, y in zip(sizes[:-1], sizes[1:])]
        return biases, weights

class large_weights(object):
    def weights(sizes):
        """Initialize weights and biases to large values."""
        biases = [np.random.randn(y, 1) for y in sizes[1:]]
        weights = [np.random.randn(y, x) for x, y in zip(sizes[:-1], sizes[1:])]
        return biases, weights
    

class Network(object):
    def __init__(self, sizes, cost=CrossEntropyCost, weights=large_weights):
        self.num_layers = len(sizes)
        self.sizes = sizes
        self.biases , self.weights = weights.weights(sizes)
        self.cost=cost

    def default_weights(self):
        """Initialize weights and biases to zero."""
        self.biases = [np.random.randn(y, 1) for y in self.sizes[1:]]
        self.weights = [np.random.randn(y, x)/np.sqrt(x) for x, y in zip(self.sizes[:-1], self.sizes[1:])]

    def large_weights(self):
        """Initialize weights and biases to large values."""
        self.biases = [np.random.randn(y, 1) for y in sizes[1:]]
        self.weights = [np.random.randn(y, x) for x, y in zip(sizes[:-1], sizes[1:])]

    def feedforward(self, a):
        """Return the output of the network if ``a`` is input."""
        for b, w in zip(self.biases, self.weights):
            a = self.sigmoid(np.dot(w, a) + b)
        return a
    
    def sigmoid(self, z):
        """The sigmoid function."""
        return 1.0 / (1.0 + np.exp(-z))
    
    def sigmoid_prime(self, z):
        """Derivative of the sigmoid function."""
        return self.sigmoid(z) * (1 - self.sigmoid(z))
    
    def cost_derivative(self, output_activations, y):
        return (output_activations - y)
    
    def cross_entropy_derivative(self, output_activations, y):
        """Cross-entropy loss function."""
        return (output_activations - y)/(output_activations * (1 - output_activations))
    
    def cross_entropy(self, output_activations, y):
        """Cross-entropy loss function."""
        return (output_activations - y)
    
    def evaluate(self, test_data):
        test_results = [(np.argmax(self.feedforward(x)), y) for (x, y) in test_data]
        return sum(int(x == y) for (x, y) in test_results)
    
    def SGD(self, training_data, epochs, mini_batch_size, eta, lmbda, test_data=None):
        
        if test_data:
            test_data = list(test_data)
            n_test = len(test_data)
        training_data = list(training_data)
        n = len(training_data)

        previous_accuracy = 0
        eta_values = [3,2,1,0.1]  # Learning rate schedule
        eta_index = 0  # Start with the first eta value

        for j in range(epochs):
            random.shuffle(training_data)
            mini_batches = [training_data[k:k+mini_batch_size] for k in range(0, n, mini_batch_size)]
            
            for mini_batch in mini_batches:
                nabla_b = [np.zeros(b.shape) for b in self.biases]
                nabla_w = [np.zeros(w.shape) for w in self.weights]
                for x, y in mini_batch:
                    delta_nabla_b = [np.zeros(b.shape) for b in self.biases]
                    delta_nabla_w = [np.zeros(w.shape) for w in self.weights]
                    activation = x
                    activations = [x]
                    zs = []
                    # feedforward to find all activations
                    for b, w in zip(self.biases, self.weights):
                        z = np.dot(w, activation) + b
                        zs.append(z)
                        activation = self.sigmoid(z)
                        activations.append(activation)

    
                    delta = self.cost.delta(zs[-1],activations[-1] ,y)
                    delta_nabla_b[-1] = delta
                    delta_nabla_w[-1] = np.dot(delta, activations[-2].transpose())

                    # backward pass to find bias and weight gradients at the hidden layers. We start from the second last layer and go backwards
                    # until we reach the first layer. We use the chain rule to compute the gradients.
                    for l in range(2, self.num_layers):
                        z = zs[-l]
                        sp = self.sigmoid_prime(z)
                        delta = np.dot(self.weights[-l+1].transpose(), delta) * sp
                        delta_nabla_b[-l] = delta
                        delta_nabla_w[-l] = np.dot(delta, activations[-l-1].transpose())
                    
                    # Adds all the weights and biases of each data set in the mini batch to the nabla_w and nabla_b respectively
                    nabla_b = [nb+dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]
                    nabla_w = [nw+dnw for nw, dnw in zip(nabla_w, delta_nabla_w)]

                # Update small portion (eta) of averages of weight and bias that were found from one mini batch
                #Regularization term for weights - Reduces overfitting (1-eta*(lmbda/n)) when lmbda is not 0
                self.weights = [(1-eta*(lmbda/n))*w-(eta/len(mini_batch))*nw for w, nw in zip(self.weights, nabla_w)]
                self.biases = [b-(eta/len(mini_batch))*nb for b, nb in zip(self.biases, nabla_b)]

            if test_data:
                current_accuracy = self.evaluate(test_data) / n_test
                print("Epoch {0}: {1} / {2} ({3:.2f}%)".format(j, int(current_accuracy * n_test), n_test, current_accuracy * 100))
                
                if current_accuracy - previous_accuracy < 0 and eta_index < len(eta_values) - 1:
                    eta_index += 1  # Move to the next eta value
                    eta = eta_values[eta_index]
                    print(f"Learning rate adjusted to {eta}")
                
                previous_accuracy = current_accuracy
                
            else:
                print("Epoch {0} complete".format(j))
                    
                
def load_data():
    f = gzip.open('D:/Neural_Network/data/mnist.pkl.gz', 'rb')
    training_data, validation_data, test_data = pickle.load(f, encoding='latin1')
    f.close()
    return training_data, validation_data, test_data

def vectorized_result(j):
    e = np.zeros((10, 1))
    e[j] = 1.0
    return e

def load_data_wrapper():
    tr_d, va_d, te_d = load_data()
    training_inputs = [np.reshape(x, (784, 1)) for x in tr_d[0]]
    training_results = [vectorized_result(y) for y in tr_d[1]]
    training_data = zip(training_inputs, training_results)
    validation_inputs = [np.reshape(x, (784, 1)) for x in va_d[0]]
    validation_data = zip(validation_inputs, va_d[1])
    test_inputs = [np.reshape(x, (784, 1)) for x in te_d[0]]
    test_data = zip(test_inputs, te_d[1])
    return training_data, validation_data, test_data


training_data, validation_data, test_data = load_data_wrapper()

net = Network([784, 100, 10])

net.SGD(training_data, 30, 10, 0.5, 5, test_data=test_data)
