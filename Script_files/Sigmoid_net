import numpy as np
import pickle
import gzip
import random
import time

class Network(object):
    def __init__(self, sizes):
        """The list ``sizes`` contains the number of neurons in the respective layers of the network.
        For example, if the list is [2, 3, 1] then the network has 2 input neurons, 3 hidden neurons,
        and 1 output neuron. The biases and weights for the network are initialized randomly.
        """
        self.num_layers = len(sizes)
        self.sizes = sizes
        self.biases = [np.random.randn(y, 1) for y in sizes[1:]]
        self.weights = [np.random.randn(y, x) for x, y in zip(sizes[:-1], sizes[1:])]

    def feedforward(self, a):
        """Return the output of the network if ``a`` is input."""
        for b, w in zip(self.biases, self.weights):
            a = self.sigmoid(np.dot(w, a) + b)
        return a
    
    def sigmoid(self, z):
        """The sigmoid function."""
        return 1.0 / (1.0 + np.exp(-z))
    
    def sigmoid_prime(self, z):
        """Derivative of the sigmoid function."""
        return self.sigmoid(z) * (1 - self.sigmoid(z))
    
    def cost_derivative(self, output_activations, y):
        return (output_activations - y)
    
    def SGD(self, training_data, epochs, mini_batch_size, eta, test_data=None):
        
        if test_data:
            test_data = list(test_data)
            n_test = len(test_data)
        training_data = list(training_data)
        n = len(training_data)
        start_time = time.time()
        for j in range(epochs):
            random.shuffle(training_data)
            mini_batches = [training_data[k:k+mini_batch_size] for k in range(0, n, mini_batch_size)]
            print('mini_batches:', mini_batches[0][0])
            batch_time = time.time() - start_time
            print('batch_time:', batch_time)



def load_data():
    f = gzip.open('D:/Neural_Network/data/mnist.pkl.gz', 'rb')
    training_data, validation_data, test_data = pickle.load(f, encoding='latin1')
    f.close()
    return training_data, validation_data, test_data

def vectorized_result(j):
    e = np.zeros((10, 1))
    e[j] = 1.0
    return e

def load_data_wrapper():
    tr_d, va_d, te_d = load_data()
    training_inputs = [np.reshape(x, (784, 1)) for x in tr_d[0]]
    training_results = [vectorized_result(y) for y in tr_d[1]]
    training_data = zip(training_inputs, training_results)
    validation_inputs = [np.reshape(x, (784, 1)) for x in va_d[0]]
    validation_data = zip(validation_inputs, va_d[1])
    test_inputs = [np.reshape(x, (784, 1)) for x in te_d[0]]
    test_data = zip(test_inputs, te_d[1])
    return training_data, validation_data, test_data


training_data, validation_data, test_data = load_data_wrapper()

net = Network([784, 10])

net.SGD(training_data, 2, 100, 3, test_data=test_data)